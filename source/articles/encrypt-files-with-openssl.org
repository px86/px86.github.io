#+TITLE: Encrypt Files with OpenSSL
#+SUBTITLE: a basic demonstration of symmetric encryption
#+AUTHOR: Pushkar Raj
#+EMAIL: px86@protonmail.com
#+DATE: [2022-09-04 Sun]

[[https://www.openssl.org/][OpenSSL]] is a software toolkit for general purpose cryptography and secure communication. On GNU/Linux systems, we can leverage the features of OpenSSL using the =openssl= command line tool.

Let's get started!

* Setup

Most probably, the openssl tool would already be installed on your system. You can verify this by running the following command in your shell,

#+begin_src shell
  openssl version
#+end_src

If =openssl= is installed, then the output will look something like this,

#+begin_src text
  OpenSSL 1.1.1n  15 Mar 2022
#+end_src

If you get an error saying =command not found=, then you need to install the /openssl/ package. On debian based systems, you can install it with the following command,

#+begin_src shell
  sudo apt install openssl
#+end_src

For the demonstration purpose, let's create a dummy file called =secret.txt=. We will encrypt this =secret.txt= file using openssl.

#+begin_src shell
  echo "Hello World" > secret.txt
#+end_src

* Encryption

We will be using the [[https://en.wikipedia.org/wiki/Advanced_Encryption_Standard][AES 256]] encryption algorithm to encrypt the file. AES is a symmetric-key encryption algorithm, which means that the same key is used to encrypt as well as decrypt the data. The length of the key can be 128, 192 or 256 bits. We would be using a 256 bit key, hence the algorithm is called =AES-256=.

However we won't be creating any key explicitly, rather, we would provide a passphrase, and openssl will automatically derive the key from the passphrase.

To encrypt the =secret.txt= file into =secret.enc.txt=, run the following command:

#+begin_src shell
  openssl aes-256-cbc -e -salt -iter 10000 -pbkdf2 -a -in secret.txt -out secret.enc.txt
#+end_src

Let's have a look on the options we have used,

| Option      | Description                                  |
|-------------+----------------------------------------------|
| =aes-256-cbc= | the AES-256 algorithm                        |
| =-e=          | this means we want to do encryption          |
| =-salt=       | read more about [[https://en.wikipedia.org/wiki/Salt_(cryptography)][salt (cryptography)]]          |
| =-iter 10000= | we want 10,000 iterations to produce the key |
| =-pbkdf2=     | passphrase based key derivation function 2   |
| =-a=          | base64 encode/decode                         |
| =-md val=     | Message digest algorithm                     |
| =-in val=     | our input file                               |
| =-out val=    | our output file                              |

This will ask for a passphrase. Make sure you remember this passphrase.
Now, you will have a =secret.enc.txt= encrypted file along side your plain text =secret.txt= file.

We will remove the =secret.txt= file, which contains our secret message. We used the =shred= command to overwrite the file and then delete it.

#+begin_src shell
  shred -fun5 secret.txt
#+end_src

* Decryption

The command for decrypting a file is almost same, except here we use the =-d= flag (d for decryption), instead of =-e= (e for encryption), and the input-output files change accordingly.

#+begin_src shell
  openssl aes-256-cbc -d -salt -iter 10000 -pbkdf2 -a -in secret.enc.txt -out secret.txt
#+end_src

This will ask for the passphrase. After entering the correct passphrase, a plain text file, =secret.txt= would be created.

* Note

This method is used to encrypt one file at a time. If you want to encrypt multiple files in one go, then make a tarball of all the files, and then encrypt the tarball with this method.
